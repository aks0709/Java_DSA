package preRequisites.BinarySearch;

public class SearchMinInRotatedSortedArray {
    class Solution {
        public int findMin(int[] nums) {
            int n=nums.length;
            int l=0;
            int h=n-1;
            int min=nums[(l+h)/2];
            while(l<=h){
                int mid=l+(h-l)/2;
                if(nums[mid]<=min)
                    min=nums[mid];

                //three condition i generated by doing dry run
                if(nums[l]<=nums[mid]&&nums[mid]<=nums[h])
                    h=mid-1;
                else if(nums[mid]<=nums[l] && nums[mid]<=nums[h])
                {
                    if(nums[l]>=nums[h])
                        h=mid-1;
                    else
                        l=mid+1;
                }
                else if(nums[mid]>=nums[l]&&nums[mid]>=nums[h]){
                    if(nums[l]<=nums[h])
                        h=mid-1;
                    else
                        l=mid+1;
                }
            }
            return min;
        }
    }
}
